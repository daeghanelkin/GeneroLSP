{
  "fileTypes": [
    "4gl",
    "4GL"
  ],
  "name": "Genero 4GL",
  "patterns": [
    {
      "include": "#Strings"
    },
    {
      "include": "#Comments"
    },
    {
      "include": "#Operators"
    },
    {
      "include": "#Numbers"
    },
    {
      "include": "#Includes"
    },
    {
      "include": "#Imports"
    },
    {
      "include": "#Globals"
    },
    {
      "include": "#Constants"
    },
    {
      "include": "#Functions"
    },
    {
      "include": "#Preprocessors"
    },
    {
      "include": "#if-statements"
    },
    {
      "include": "#case-statements"
    },
    {
      "include": "#TypeDefinitions"
    },
    {
      "include": "#ConstantDefinitions"
    },
    {
      "include": "#VariableDefinitions"
    },
    {
      "include": "#Macros"
    }
  ],
  "repository": {
    "Strings": {
      "name": "meta.string.4gl",
      "patterns": [
        {
          "name": "string.quoted.double.4gl",
          "begin": "\"",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.string.begin.4gl"
            }
          },
          "end": "\"",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.string.end.4gl"
            }
          },
          "patterns": [
            {
              "name": "constant.character.escape.4gl",
              "match": "\\\\."
            }
          ]
        },
        {
          "name": "string.quoted.single.4gl",
          "begin": "'",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.string.begin.4gl"
            }
          },
          "end": "'",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.string.end.4gl"
            }
          },
          "patterns": [
            {
              "name": "constant.character.escape.4gl",
              "match": "\\\\."
            }
          ]
        }
      ]
    },
    "Comments": {
      "patterns": [
        {
          "name": "comment.line.double-dash.4gl",
          "begin": "--",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.comment.4gl"
            }
          },
          "end": "$"
        },
        {
          "name": "comment.line.number-sign.4gl",
          "begin": "#",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.comment.4gl"
            }
          },
          "end": "$"
        },
        {
          "name": "comment.block.4gl",
          "begin": "{",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.comment.4gl"
            }
          },
          "end": "}",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.comment.4gl"
            }
          }
        }
      ]
    },
    "Operators": {
      "patterns": [
        {
          "comment": "Comparison Operators",
          "name": "keyword.operator.comparison.4gl",
          "match": "!=|<=|>=|==|<|>"
        },
        {
          "comment": "Comparison Operators",
          "name": "keyword.operator.comparison.4gl",
          "match": "(?i)\\b(is null|like|matches|nvl|iif)\\b"
        },
        {
          "comment": "Arithmetic Operators",
          "name": "keyword.operator.arithmetic.4gl",
          "match": "(?i)\\b(mod)\\b"
        },
        {
          "comment": "Arithmetic Operators",
          "name": "keyword.operator.arithmetic.4gl",
          "match": "\\*|\\/|-|\\+|\\*\\*"
        },
        {
          "comment": "Assignment Operators",
          "name": "keyword.operator.assignment.4gl",
          "match": "=|:="
        },
        {
          "comment": "Boolean Operators",
          "name": "keyword.operator.boolean.4gl",
          "match": "(?i)\\b(and|or|not)\\b"
        },
        {
          "comment": "Data type Operators",
          "name": "keyword.operator.datatype.4gl",
          "match": "(?i)\\b(cast|instanceof)\\b"
        },
        {
          "comment": "Date and Time Operators",
          "name": "keyword.operator.datetime.4gl",
          "match": "(?i)\\b(current|extend|date|time|today|year|month|day|weekday|mdy|units)\\("
        },
        {
          "comment": "SQL Related Operators",
          "name": "keyword.operator.sql.4gl",
          "match": "(?i)\\b(sqlstate|sqlerrmessage)\\b"
        },
        {
          "comment": "Dialog Handling Operators",
          "name": "keyword.operator.dialog.4gl",
          "match": "(?i)\\b(get_fldbuf|infield|field_touched)\\b"
        }
      ]
    },
    "Numbers": {
      "comment": "Numbers",
      "name": "constant.numeric.4gl",
      "match": "([+-]?)(\\b\\d+|(\\.)\\d+)",
      "captures": {
        "1": {
          "patterns": [
            {
              "comment": "Number Positive Sign",
              "name": "keyword.operator.plus.decimal.4gl",
              "match": "\\+"
            },
            {
              "comment": "Number Negative Sign",
              "name": "keyword.operator.plus.decimal.4gl",
              "match": "\\-"
            }
          ]
        },
        "3": {
          "comment": "Number Decimal Point",
          "name": "constant.numeric.decimal.point"
        }
      }
    },
    "Datatypes": {
      "patterns": [
        {
          "comment": "Simple Data Types",
          "name": "storage.type.4gl",
          "match": "(?i)\\b(bigint|byte|boolean|date|int|integer|real|smallfloat|smallint|string|tinyint|text)\\b"
        },
        {
          "comment": "Complex Data Types",
          "patterns": [
            {
              "comment": "CHAR type",
              "match": "(?i)\\b((?:n(?!character\\b))?char(?:acter)?)\\b(?:\\s*(\\()\\s*(\\d+)\\s*(\\)))?",
              "captures": {
                "1": {
                  "name": "storage.type.4gl"
                },
                "2": {
                  "name": "punctuation.section.scope.begin.4gl"
                },
                "3": {
                  "name": "storage.type.char.size.4gl",
                  "patterns": [
                    {
                      "include": "#Numbers"
                    }
                  ]
                },
                "4": {
                  "name": "punctuation.section.scope.end.4gl"
                }
              }
            },
            {
              "comment": "VARCHAR type",
              "match": "(?i)\\b((?:l|n)?varchar)\\b(?:\\s*(\\()\\s*(\\d+)\\s*(?:(,)\\s*(\\d+)\\s*)?(\\)))?",
              "captures": {
                "1": {
                  "name": "storage.type.4gl"
                },
                "2": {
                  "name": "punctuation.section.scope.begin.4gl"
                },
                "3": {
                  "name": "storage.type.varchar.size.4gl",
                  "patterns": [
                    {
                      "include": "#Numbers"
                    }
                  ]
                },
                "4": {
                  "name": "punctuation.separator.comma.4gl"
                },
                "5": {
                  "name": "storage.type.varchar.reserve.4gl",
                  "patterns": [
                    {
                      "include": "#Numbers"
                    }
                  ]
                },
                "6": {
                  "name": "punctuation.section.scope.end.4gl"
                }
              }
            },
            {
              "comment": "DECIMAL & MONEY type",
              "match": "(?i)(\\b(?:dec|decimal|numeric|money)\\b)(?:\\s*(\\()\\s*(\\d+)\\s*(?:(,)\\s*(\\d+)\\s*)?(\\)))?",
              "captures": {
                "1": {
                  "name": "storage.type.4gl"
                },
                "2": {
                  "name": "punctuation.section.scope.begin.4gl"
                },
                "3": {
                  "name": "storage.type.precision.4gl",
                  "patterns": [
                    {
                      "include": "#Numbers"
                    }
                  ]
                },
                "4": {
                  "name": "punctuation.separator.comma.4gl"
                },
                "5": {
                  "name": "storage.type.scale.4gl",
                  "patterns": [
                    {
                      "include": "#Numbers"
                    }
                  ]
                },
                "6": {
                  "name": "punctuation.section.scope.end.4gl"
                }
              }
            },
            {
              "comment": "FLOAT & DOUBLE TYPE",
              "match": "(?i)\\b(float|(?:double\\s+precision))\\b\\s*(\\s*(\\()\\s*(\\d+)\\s*(\\)))?",
              "captures": {
                "1": {
                  "name": "storage.type.4gl"
                },
                "3": {
                  "name": "punctuation.section.scope.begin.4gl"
                },
                "4": {
                  "name": "storage.type.precision.4gl",
                  "patterns": [
                    {
                      "include": "#Numbers"
                    }
                  ]
                },
                "5": {
                  "name": "punctuation.section.scope.end.4gl"
                }
              }
            },
            {
              "comment": "DATETIME type",
              "match": "(?i)\\b(datetime)\\s+(year|month|day|hour|minute|second|fraction)\\s+(to)\\s+((year|month|day|hour|minute|second)\\b|((fraction)\\s*(\\()\\s*([1-5])\\s*(\\))))",
              "captures": {
                "1": {
                  "name": "storage.type.4gl"
                },
                "2": {
                  "name": "storage.type.datetime.time.4gl"
                },
                "3": {
                  "name": "keyword.other.4gl"
                },
                "5": {
                  "name": "storage.type.datetime.time.4gl"
                },
                "7": {
                  "name": "storage.type.datetime.time.4gl"
                },
                "8": {
                  "name": "punctuation.section.scope.begin.4gl"
                },
                "9": {
                  "name": "storage.type.datetime.time.scale.4gl",
                  "patterns": [
                    {
                      "include": "#Numbers"
                    }
                  ]
                },
                "10": {
                  "name": "punctuation.section.scope.end.4gl"
                }
              }
            },
            {
              "comment": "INTERVAL type",
              "match": "(?i)\\b(interval)\\s+(year|month|day|hour|minute|second|fraction)(?:(?:(?<!fraction)\\s*(\\()\\s*([1-9])\\s*(\\))))?\\s+(to)\\s+(?:(year|month|day|hour|minute|second)\\b|(?:(fraction)\\b(?:\\s*(\\()\\s*([1-5])\\s*(\\)))?))",
              "captures": {
                "1": {
                  "name": "storage.type.4gl"
                },
                "2": {
                  "name": "storage.type.interval.time.4gl"
                },
                "3": {
                  "name": "punctuation.section.scope.begin.4gl"
                },
                "4": {
                  "name": "storage.type.interval.time.precision.4gl",
                  "patterns": [
                    {
                      "include": "#Numbers"
                    }
                  ]
                },
                "5": {
                  "name": "punctuation.section.scope.end.4gl"
                },
                "6": {
                  "name": "keyword.other.4gl"
                },
                "7": {
                  "name": "storage.type.interval.time.4gl"
                },
                "8": {
                  "name": "storage.type.interval.time.4gl"
                },
                "9": {
                  "name": "punctuation.section.scope.begin.4gl"
                },
                "10": {
                  "name": "storage.type.interval.time.scale.4gl",
                  "patterns": [
                    {
                      "include": "#Numbers"
                    }
                  ]
                },
                "11": {
                  "name": "punctuation.section.scope.end.4gl"
                }
              }
            },
            {
              "comment": "DICTIONARY type",
              "match": "(?i)\\b(dictionary)\\s+(of)\\s+(.*)",
              "captures": {
                "1": {
                  "name":"storage.type.dictionary.4gl"
                },
                "2": {
                  "name": "keyword.other.4gl"
                },
                "3": {
                  "patterns": [
                    {
                      "include": "#Datatypes"
                    },
                    {
                      "include": "#Records"
                    },
                    {
                      "match": "([[:alnum:]_]+(\\.))?[[:alnum:]_]+",
                      "name": "constant.other.4gl"
                    }
                  ]
                }
              }
            },
            {
              "comment": "LIKE type",
              "match": "(?i)\\b(like)\\s+(([[:alnum:]_]+(\\.))?[[:alnum:]_]+\\.[[:alnum:]_]+)",
              "captures": {
                "1": {
                  "name": "keyword.other.4gl"
                },
                "2": {
                  "name": "constant.other.4gl"
                }
              }
            }
          ]
        }
      ]
    },
    "Includes": {
      "comment": "Include files",
      "name": "meta.preprocessor.include.4gl",
      "begin": "(?i)^\\s*&include\\s",
      "beginCaptures": {
        "0": {
          "name": "keyword.control.directive.include.4gl"
        }
      },
      "patterns": [
        {
          "include": "#Strings"
        }
      ],
      "end": "$"
    },
    "Imports": {
      "comment": "Import files",
      "name": "meta.import.4gl",
      "begin": "(?i)^\\s*(import)",
      "beginCaptures": {
        "$1": {
          "name": "support.function.4gl"
        }
      },
      "patterns": [
        {
          "match": "(?i)\\s+(?:(fgl|java)\\s+)?(?:\\s*(?:--|#)\\s*)?(\\w+)",
          "captures": {
            "1": {
              "name": "support.class.4gl"
            },
            "2": {
              "name": "support.module.4gl"
            }
          }
        },
        {
          "match": ".*",
          "name": "support.module.4gl"
        }
      ],
      "end": "(?i)((?=(?:^\\s*(?:(?:private|public|type|constant|function|report|main|type|define|options|whenever|defer|import)\\b)))"
    },
    "Globals": {
      "comment": "Globals",
      "name": "meta.preprocessor.global.4gl",
      "begin": "(?i)^\\s*globals\\s",
      "beginCaptures": {
        "0": {
          "name": "keyword.control.directive.globals.4gl"
        }
      },
      "patterns": [
        {
          "include": "#Strings"
        }
      ],
      "end": "$"
    },
    "Constants": {
      "comment": "Constants",
      "name": "constant.4gl",
      "patterns": [
        {
          "comment": "Boolean Constants",
          "name": "constant.boolean.4gl",
          "match": "(?i)\\b(true|false)\\b"
        },
        {
          "name": "constant.sqlca.4gl",
          "match": "(?i)\\b(sqlca\\.sql(code|errm|errp|errd|awarn))\\b"
        }
      ]
    },
    "FunctionParameters": {
      "name": "meta.function.definition.parameters",
      "begin": "\\(",
      "beginCaptures": {
        "0": {
          "name": "punctuation.section.parameters.begin"
        }
      },
      "patterns": [
        {
          "match": "(?i)([a-z0-9_]+)((\\s+(like))?\\s+([a-z0-9_.]+))?",
          "captures": {
            "1": {
              "name": "variable.parameter.4gl"
            },
            "4": {
              "name": "keyword.operator.defintion.4gl"
            },
            "5": {
              "patterns": [
                {
                  "include": "#Datatypes"
                }
              ]
            }
          }
        },
        {
          "match": ",",
          "name": "punctuation.separator.parameters.comma.4gl"
        }
      ],
      "end": "\\)",
      "endCaptures": {
        "0": {
          "name": "punctuation.section.parameters.end"
        }
      }
    },
    "Functions": {
      "name": "meta.function.4gl",
      "begin": "(?i)^\\s*(?:(public|private)\\s+)?(function)\\s+(\\w+)\\s*((\\()(.*)(\\)))",
      "beginCaptures": {
        "1": {
          "name": "storage.modifier.4gl"
        },
        "2": {
          "name": "storage.type.function.4gl"
        },
        "3": {
          "name": "meta.definition.function.4gl entity.name.function.4gl"
        },
        "4": {
          "name": "meta.parameters.4gl",
          "begin": "(\\()",
          "beginCaptures": {
            "1": {
              "name": "punctuation.definition.parameters.4gl"
            }
          },
          "end": "\\)",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.parameters.4gl"
            }
          }
        }
      },
      "patterns": [
        {
          "include": "$base"
        }
      ],
      "end": "(?i)^\\s*(end)\\s+(function)",
      "endCaptures": {
        "1": {
          "name": "keyword.control.4gl"
        },
        "2": {
          "name": "storage.type.4gl"
        }
      }
    },
    "Preprocessors": {
      "name": "keyword.other.preprocessor.4gl",
      "match": "\\b(__(FILE|LINE)__)\\b"
    },
    "Records": {
      "comment": "RECORD type",
      "patterns": [
        {
          "match": "(?i)\\b(record)\\s+(like)\\s+(([[:alnum:]_]+(\\.))?[[:alnum:]_]+(\\.)\\*)",
          "captures": {
            "1": {
              "name": "storage.type.record.4gl"
            },
            "2": {
              "name": "keyword.other.4gl"
            }, 
            "3": {
              "name": "constant.other.4gl"
            }
          }
        },
        {
          "name": "meta.var.definition.record.4gl",
          "begin": "(?i)\\b(record)\\b(?!\\s+like\\b)",
          "foldingStartMarker": "(?i)\\b(record)\\b(?!\\s+like\\b)",
          "beginCaptures": {
            "1": {
              "name": "storage.type.record.4gl"
            }
          },
          "patterns": [
            {
              "include": "#Datatypes"
            },
            {
              "include": "#Records"
            },
            {
              "include": "#Arrays"
            }
          ],
          "foldingStopMarker": "(?i)\\b(end)\\s+(record)\\b",
          "end": "(?i)\\b(end)\\s+(record)\\b",
          "endCaptures": {
            "1": {
              "name": "keyword.control.4gl"
            },
            "2": {
              "name": "storage.type.record.4gl"
            }
          }
        }
      ]
    },
    "Arrays": {
      "patterns": [
        {
          "comment": "Dynamic Array",
          "match": "(?i)\\b(dynamic)\\s+(array)\\s+(?:(with)\\s+(dimension)\\s+(\\d+)\\s+)?(of)\\s+(.*)",
          "captures":{
            "1":{
              "name": "storage.modifier.4gl"
            },
            "2":{
              "name": "storage.type.array.4gl"
            },
            "3":{
              "name": "keyword.other.4gl"
            },
            "4":{
              "name": "keyword.other.4gl"
            },
            "5": {
              "name": "storage.type.array.dimension.4gl",
              "patterns": [
                {
                  "include": "#Numbers"
                }
              ]
            },
            "6":{
              "name": "keyword.other.4gl"
            },
            "7":{
              "patterns":[
                {
                  "include": "#Datatypes"
                },
                {
                  "include": "#Records"
                },
                {
                  "match": "([[:alnum:]_]+(\\.))?[[:alnum:]_]+",
                  "name": "constant.other.4gl"
                }
              ]
            }
          }
        },
        {
          "comment": "Static Array",
          "match": "(?i)\\b(array)\\b\\s*(\\[)\\s*(\\d+)\\s*(?:(,)\\s*(\\d+)\\s*(?:(,)\\s*(\\d+)\\s*)?)?(\\])\\s*(of)\\s+(.*)",
          "captures": {
            "1": {
              "name": "storage.type.array.4gl"
            },
            "2": {
              "name": "punctuation.section.scope.begin.4gl"
            },
            "3":{
              "name": "storage.type.array.dimension.4gl",
              "patterns":[
                {
                  "include": "#Numbers"
                }
              ]
            },
            "4": {
              "name": "punctuation.separator.comma.4gl"
            },
            "5": {
              "name": "storage.type.array.dimension.4gl",
              "patterns": [
                {
                  "include": "#Numbers"
                }
              ]
            },
            "6": {
              "name": "punctuation.separator.comma.4gl"
            },
            "7": {
              "name": "storage.type.array.dimension.4gl",
              "patterns": [
                {
                  "include": "#Numbers"
                }
              ]
            },
            "8": {
              "name": "punctuation.section.scope.end.4gl"
            },
            "9": {
              "name": "keyword.other.4gl"
            },
            "10": {
              "patterns":[
                {
                  "include": "#Datatypes"
                },
                {
                  "include": "#Records"
                },
                {
                  "match": "([[:alnum:]_]+(\\.))?[[:alnum:]_]+",
                  "name": "constant.other.4gl"
                }
              ]
            }
          }
        }
      ]
    },
    "if-statements": {
      "name": "meta.conditional.if.4gl",
      "begin": "(?i)^\\s*(if)\\s+(.*)\\s+(then)",
      "beginCaptures": {
        "1": {
          "name":"keyword.control.conditional.4gl"
        },
        "2":{
          "name": "meta.conditional.if.conditions.4gl",
          "patterns": [
            {
              "include": "$base"
            }
          ]
        },
        "3": {
          "name": "keyword.control.conditional.4gl"
        }
      },
      "patterns": [
        {
          "include": "$base"
        }
      ],
      "end": "(?i)\\b(end if)\\b",
      "endCaptures": {
        "1": {
          "name": "keyword.control.conditional.4gl"
        }
      }
    },
    "case-statements": {
      "name": "meta.conditional.case.4gl",
      "begin": "(?i)\\b(case)\\b",
      "beginCaptures": {
        "1":{
          "name":"keyword.control.conditional.4gl"
        }
      },
      "patterns": [
        {
          "include": "$base"
        }
      ],
      "end":"(?i)\\b(end case)\\b",
      "endCaptures": {
        "1":{
          "name":"keyword.control.conditional.4gl"
        }
      }
    },
    "TypeDefinitions": {
      "name": "meta.type.4gl",
      "begin": "(?i)^\\s*(?:(private|public)\\s+)?(type)\\b",
      "beginCaptures": {
        "1": {
          "name": "storage.type.modifier.access.control.4gl"
        },
        "2": {
          "name": "storage.type.4gl"
        }
      },
      "patterns": [
        {
          "include": "#Datatypes"
        },
        {
          "include": "#Records"
        },
        {
          "include": "#Arrays"
        },
        {
          "include": "#Strings"
        },
        {
          "include": "#Comments"
        }
      ],
      "end": "(?i)((?=(?:^\\s*(?:(?:private|public|type|constant|function|report|main|type|define|let|initialize|call|if|case|while|for|prepare|declare|execute|open|fetch|close|select|insert|update|options|whenever|defer)\\b)))"
    },
    "ConstantDefinitions": {
      "name": "meta.constant.4gl",
      "begin": "(?i)^\\s*(?:(private|public)\\s+)?(constant)\\b",
      "beginCaptures": {
        "1": {
          "name": "storage.type.modifier.access.control.4gl"
        },
        "2": {
          "name": "storage.type.4gl"
        }
      },
      "patterns": [
        {
          "include": "#Datatypes"
        },
        {
          "include": "#Records"
        },
        {
          "include": "#Arrays"
        },
        {
          "include": "#Strings"
        },
        {
          "include": "#Comments"
        }
      ],
      "end": "(?i)((?=(?:^\\s*(?:private|public|type|constant|function|report|main|type|define|let|initialize|call|if|case|while|for|prepare|declare|execute|open|fetch|close|select|insert|update|options|whenever|defer)\\b)))"
    },
    "VariableDefinitions": {
      "name": "meta.define.4gl",
      "begin": "(?i)^\\s*(?:(private|public)\\s+)?(define)\\b",
      "beginCaptures": {
        "1": {
          "name": "storage.type.modifier.access.control.4gl"
        },
        "2": {
          "name": "keyword.other.4gl"
        }
      },
      "patterns": [
        {
          "include": "#Datatypes"
        },
        {
          "include": "#Records"
        },
        {
          "include": "#Arrays"
        },
        {
          "include": "#Strings"
        },
        {
          "include": "#Comments"
        }
      ],
      "end": "(?i)((?=(?:^\\s*(?:private|public|type|constant|function|report|main|type|define|let|initialize|call|if|case|while|for|prepare|declare|execute|open|fetch|close|select|insert|update|options|whenever|defer)\\b)))"
    },
    "Macros": {
      "name": "meta.macro.4gl",
      "begin": "(?i)^\\s*(&define)",
      "beginCaptures": {
        "1": {
          "name": "keyword.control.4gl"
        }
      },
      "end": "((?=(?:(?<!\\\\\\s*)$)))"
    }
  },
  "scopeName": "source.4gl"
}