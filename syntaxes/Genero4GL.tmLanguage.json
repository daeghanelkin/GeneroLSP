{
  "fileTypes": [
    "4gl",
    "4GL"
  ],
  "name": "Genero 4GL",
  "patterns": [
    {
      "include": "#Strings"
    },
    {
      "include": "#Comments"
    },
    {
      "include": "#Operators"
    },
    {
      "include": "#Numbers"
    },
    {
      "include": "#Datatypes"
    },
    {
      "include": "#Includes"
    },
    {
      "include": "#Imports"
    },
    {
      "include": "#Globals"
    },
    {
      "include": "#Constants"
    },
    {
      "include": "#Functions"
    },
    {
      "include": "#Preprocessors"
    },
    {
      "include": "#Records"
    },
    {
      "include": "#Var-Definitions"
    },
    {
      "include": "#if-statements"
    },
    {
      "include": "#case-statements"
    }
  ],
  "repository": {
    "Strings": {
      "name": "string.quoted.double.4gl",
      "begin": "\"",
      "end": "\"",
      "patterns": [
        {
          "name": "constant.character.escape.4gl",
          "match": "\\\\."
        }
      ]
    },
    "Comments": {
      "patterns": [
        {
          "begin": "(^[ \\t]+)?(?=--)",
          "beginCaptures": {
            "1": {
              "name": "punctuation.whitespace.comment.leading.4gl"
            }
          },
          "end": "(?!\\G)",
          "patterns": [
            {
              "begin": "--",
              "beginCaptures": {
                "0": {
                  "name": "punctuation.definition.comment.4gl"
                }
              },
              "end": "\\n",
              "name": "comment.line.double-dash.4gl"
            }
          ]
        },
        {
          "begin": "(^[ \\t]+)?(?=#)",
          "beginCaptures": {
            "1": {
              "name": "punctuation.whitespace.comment.leading.4gl"
            }
          },
          "end": "(?!\\G)",
          "patterns": [
            {
              "begin": "#",
              "beginCaptures": {
                "0": {
                  "name": "punctuation.definition.comment.4gl"
                }
              },
              "end": "\\n",
              "name": "comment.line.numeral.4gl"
            }
          ]
        },
        {
          "begin": "(^[ \\t]+)?(?=#)",
          "beginCaptures": {
            "1": {
              "name": "punctuation.whitespace.comment.leading.4gl"
            }
          },
          "end": "(?!\\G)",
          "patterns": []
        },
        {
          "begin": "{",
          "captures": {
            "0": {
              "name": "punctuation.definition.comment.4gl"
            }
          },
          "end": "}",
          "name": "comment.block.c"
        }
      ]
    },
    "Operators": {
      "patterns": [
        {
          "comment": "Comparison Operators",
          "name": "keyword.operator.comparison.4gl",
          "match": "!=|<=|>=|==|<|>"
        },
        {
          "comment": "Comparison Operators",
          "name": "keyword.operator.comparison.4gl",
          "match": "(?i)\\b(is null|like|matches|nvl|iif)\\b"
        },
        {
          "comment": "Arithmetic Operators",
          "name": "keyword.operator.arithmetic.4gl",
          "match": "(?i)\\b(mod)\\b"
        },
        {
          "comment": "Arithmetic Operators",
          "name": "keyword.operator.arithmetic.4gl",
          "match": "\\*|\\/|-|\\+|\\*\\*"
        },
        {
          "comment": "Assignment Operators",
          "name": "keyword.operator.assignment.4gl",
          "match": "=|:="
        },
        {
          "comment": "Boolean Operators",
          "name": "keyword.operator.boolean.4gl",
          "match": "(?i)\\b(and|or|not)\\b"
        },
        {
          "comment": "Data type Operators",
          "name": "keyword.operator.datatype.4gl",
          "match": "(?i)\\b(cast|instanceof)\\b"
        },
        {
          "comment": "Date and Time Operators",
          "name": "keyword.operator.datetime.4gl",
          "match": "(?i)\\b(current|extend|date|time|today|year|month|day|weekday|mdy|units)\\("
        },
        {
          "comment": "SQL Related Operators",
          "name": "keyword.operator.sql.4gl",
          "match": "(?i)\\b(sqlstate|sqlerrmessage)\\b"
        },
        {
          "comment": "Dialog Handling Operators",
          "name": "keyword.operator.dialog.4gl",
          "match": "(?i)\\b(get_fldbuf|infield|field_touched)\\b"
        }
      ]
    },
    "Numbers": {
      "comment": "Numbers",
      "name": "constant.numeric.4gl",
      "match": "([+-]?)(\\b\\d+|(\\.)\\d+)",
      "captures": {
        "1": {
          "patterns": [
            {
              "comment": "Number Positive Sign",
              "name": "keyword.operator.plus.decimal.4gl",
              "match": "\\+"
            },
            {
              "comment": "Number Negative Sign",
              "name": "keyword.operator.plus.decimal.4gl",
              "match": "\\-"
            }
          ]
        },
        "3": {
          "comment": "Number Decimal Point",
          "name": "constant.numeric.decimal.point"
        }
      }
    },
    "Datatypes": {
      "patterns": [
        {
          "comment": "Simple Data Types",
          "name": "storage.type.4gl",
          "match": "(?i)\\b(bigint|byte|boolean|date|float|int|integer|smallfloat|smallint|string|tinyint|text)\\b"
        },
        {
          "comment": "Complex Data Types",
          "patterns": [
            {
              "comment": "CHAR & VARCHAR type",
              "match": "(?i)\\b(varchar|char(?:acter)?)\\b(\\s*(\\()([0-9]+)(\\)))?",
              "captures": {
                "1": {
                  "name": "storage.type.4gl"
                },
                "3": {
                  "name": "punctuation.section.scope.begin.4gl"
                },
                "4": {
                  "name": "storage.type.length.4gl",
                  "patterns": [
                    {
                      "include": "#Numbers"
                    }
                  ]
                },
                "5": {
                  "name": "punctuation.section.scope.end.4gl"
                }
              }
            },
            {
              "comment": "DECIMAL & MONEY type",
              "match": "(?i)(\\b(dec|decimal|numeric|money)\\b)(\\s*(\\()(\\d+)((,)\\s*(\\d+))?(\\)))?",
              "captures": {
                "2": {
                  "name": "storage.type.4gl"
                },
                "4": {
                  "name": "punctuation.section.scope.begin.4gl"
                },
                "5": {
                  "name": "storage.type.precision.4gl",
                  "patterns": [
                    {
                      "include": "#Numbers"
                    }
                  ]
                },
                "7": {
                  "name": "punctuation.separator.comma.4gl"
                },
                "8": {
                  "name": "storage.type.scale.4gl",
                  "patterns": [
                    {
                      "include": "#Numbers"
                    }
                  ]
                },
                "9": {
                  "name": "punctuation.section.scope.end.4gl"
                }
              }
            },
            {
              "comment": "DATETIME type",
              "match": "(?i)\\b(datetime)\\s+(year|month|day|hour|minute|second|fraction)\\s+(to)\\s+(year|month|day|hour|minute|second|(fraction\\s*(\\()\\s*([1-5])\\s*(\\))))",
              "captures": {
                "1": {
                  "name": "storage.type.4gl"
                },
                "2": {
                  "name": "storage.type.datetime.time.4gl"
                },
                "3": {
                  "name": "keyword.other.4gl"
                },
                "4": {
                  "name": "storage.type.datetime.time.4gl"
                },
                "6": {
                  "name": "punctuation.section.scope.begin.4gl"
                },
                "7": {
                  "name": "storage.type.datetime.time.fraction.scale.4gl",
                  "patterns": [
                    {
                      "include": "#Numbers"
                    }
                  ]
                },
                "8": {
                  "name": "punctuation.section.scope.end.4gl"
                }
              }
            },
            {
              "comment": "INTERVAL type",
              "match": "(?i)\\b(interval)\\s+(((year|month|day|hour|minute|second)\\s*(\\()([1-9])(\\)))|fraction)\\s+(to)\\s+(year|month|day|hour|minute|second|(fraction\\s*(\\()\\s*([1-5])\\s*(\\))))",
              "captures": {
                "1": {
                  "name": "storage.type.4gl"
                },
                "2": {
                  "name": "storage.type.datetime.time.4gl"
                },
                "5": {
                  "name": "punctuation.section.scope.begin.4gl"
                },
                "6": {
                  "name": "storage.type.datetime.time.precision.4gl",
                  "patterns": [
                    {
                      "include": "#Numbers"
                    }
                  ]
                },
                "7": {
                  "name": "punctuation.section.scope.end.4gl"
                },
                "8": {
                  "name": "keyword.other.4gl"
                },
                "9": {
                  "name": "storage.type.datetime.time.4gl"
                },
                "11": {
                  "name": "punctuation.section.scope.begin.4gl"
                },
                "12": {
                  "name": "storage.type.datetime.time.fraction.scale.4gl",
                  "patterns": [
                    {
                      "include": "#Numbers"
                    }
                  ]
                },
                "13": {
                  "name": "punctuation.section.scope.end.4gl"
                }
              }
            }
          ]
        }
      ]
    },
    "Includes": {
      "comment": "Include files",
      "name": "meta.preprocessor.include.4gl",
      "begin": "(?i)^\\s*&include\\s",
      "beginCaptures": {
        "0": {
          "name": "keyword.control.directive.include.4gl"
        }
      },
      "patterns": [
        {
          "include": "#Strings"
        }
      ],
      "end": "$"
    },
    "Imports": {
      "comment": "Import files",
      "name": "meta.preprocessor.import.4gl",
      "match": "(?i)^\\s*(import)\\s((fgl\\s([a-z0-9_]+))|(java\\s([a-z0-9_]+))|([a-z0-9_]+))$",
      "captures": {
        "1": {
          "name": "keyword.control.directive.import.4gl"
        },
        "3": {
          "name": "keyword.control.directive.import.fgl.4gl"
        },
        "4": {
          "name": "keyword.control.directive.import.fgl.modulename.4gl"
        },
        "5": {
          "name": "keyword.control.directive.import.java.4gl"
        },
        "6": {
          "name": "keyword.control.directive.import.fgl.classname.4gl"
        },
        "7": {
          "name": "keyword.control.directive.import.c.libname.4gl"
        }
      }
    },
    "Globals": {
      "comment": "Globals",
      "name": "meta.preprocessor.global.4gl",
      "begin": "(?i)^\\s*globals\\s",
      "beginCaptures": {
        "0": {
          "name": "keyword.control.directive.globals.4gl"
        }
      },
      "patterns": [
        {
          "include": "#Strings"
        }
      ],
      "end": "$"
    },
    "Constants": {
      "comment": "Constants",
      "name": "constant.4gl",
      "patterns": [
        {
          "comment": "Boolean Constants",
          "name": "constant.boolean.4gl",
          "match": "(?i)\\b(true|false)\\b"
        },
        {
          "name": "constant.sqlca.4gl",
          "match": "(?i)\\b(sqlca\\.sql(code|errm|errp|errd|awarn))\\b"
        }
      ]
    },
    "FunctionParameters": {
      "name": "meta.function.definition.parameters",
      "begin": "\\(",
      "beginCaptures": {
        "0": {
          "name": "punctuation.section.parameters.begin"
        }
      },
      "patterns": [
        {
          "match": "(?i)([a-z0-9_]+)((\\s+(like))?\\s+([a-z0-9_.]+))?",
          "captures": {
            "1": {
              "name": "variable.parameter.4gl"
            },
            "4": {
              "name": "keyword.operator.defintion.4gl"
            },
            "5": {
              "patterns": [
                {
                  "include": "#Datatypes"
                }
              ]
            }
          }
        },
        {
          "match": ",",
          "name": "punctuation.separator.parameters.comma.4gl"
        }
      ],
      "end": "\\)",
      "endCaptures": {
        "0": {
          "name": "punctuation.section.parameters.end"
        }
      }
    },
    "Functions": {
      "name": "meta.function.4gl",
      "begin": "(?i)^\\s*((public|private)\\s+)?(function)\\s+([a-z0-9_]+)\\s*(\\(.*?\\))(\\s*(returns)\\s*([a-z]+|\\(.*?\\)))?",
      "beginCaptures": {
        "2": {
          "name": "storage.type.modifier.access.control.4gl"
        },
        "3": {
          "name": "storage.type.function.4gl"
        },
        "4": {
          "name": "entity.name.function.4gl"
        },
        "5": {
          "patterns": [
            {
              "include": "#FunctionParameters"
            }
          ]
        },
        "7": {
          "name": "keyword.control.4gl"
        },
        "8": {
          "patterns": [
            {
              "include": "#ReturnParameters"
            }
          ]
        }
      },
      "patterns": [
        {
          "include": "$base"
        }
      ],
      "end": "(?i)^\\s*(end)\\s+(function)",
      "endCaptures": {
        "1": {
          "name": "keyword.control.4gl"
        },
        "2": {
          "name": "storage.type.function.4gl"
        }
      }
    },
    "Preprocessors": {
      "name": "keyword.other.preprocessor.4gl",
      "match": "\\b(__(ABS|BACKWARDKEY|BADSQLMSG|BETWEEN|CLEAREXCEPTION|COMBINE_DATE_TIME|DBGLVL|DEBUG|EXCEPTIONMESSAGE|FILE__|FORWARDKEY|HASEXCEPTION|IN|IS_USSTATE|IS_USZIP|LEFT|LINE__|MAX|MAXDATE|MAX_DED|MAXEMPLOYEE|MAX_FICA_DED|MAX_FIT_DED|MAX_LIT_DED|MAX_MEDC_DED|MAX_SIT_DED|MIN|MINDATE|MIN_DED|MIN_FICA_DED|MIN_FIT_DED|MIN_LIT_DED|MIN_MEDC_DED|MIN_SIT_DED|NOEXCEPTION|REPEAT|RETRO_TODO|RIGHT|THROW|VALUE_OR_DEFAULT|XOR|YN2BIT|ZERO))\\b"
    },
    "Records": {
      "name": "meta.var.definition.record.4gl",
      "begin": "(?i)\\b(record)\\b",
      "beginCaptures": {
        "1": {
          "name": "storage.type.4gl"
        }
      },
      "patterns": [
        {
          "include": "#Datatypes"
        },
        {
          "include": "#Numbers"
        }
      ],
      "end": "(?i)\\b(end)\\s(record)\\b",
      "endCaptures": {
        "1": {
          "name": "keyword.control.4gl"
        },
        "2": {
          "name": "storage.type.4gl"
        }
      }
    },
    "Var-Definitions": {
      "name": "meta.var.definition.4gl",
      "begin": "(?i)(?=(?<![_$[:alnum:]])\\b(define)(?![_$[:alnum:]]))",
      "beginCaptures": {
        "1": {
          "name": "keyword.control.defintion.4gl"
        }
      },
      "patterns": [
        {
          "include": "#Datatypes"
        },
        {
          "include": "#Records"
        }
      ],
      "end": "$(?<!\\W)"
    },
    "if-statements": {
      "name": "meta.conditional.if.4gl",
      "begin": "(?i)(?i)(?=(?<!end\\s)\\bif\\b)",
      "patterns": [
        {
          "begin": "(?i)\\b(if)\\b",
          "beginCaptures": {
            "1": {
              "name": "keyword.conditional.if.4gl"
            }
          },
          "patterns" : [
            {
              "comment": "Matches statements with structure IF (condition) THEN",
              "contentName": "meta.conditional.if.conditions.4gl",
              "begin": "\\(",
              "beginCaptures": {
                "0": {
                  "name": "punctuation.section.parameters.begin"
                }
              },
              "patterns":[
                {
                  "include": "$base"
                }
              ],
              "end": "\\)",
              "endCaptures": {
                "0": {
                  "name": "punctuation.section.parameters.end"
                }
              }
            }
          ],
          "end": "(?i)\\b(then)\\b",
          "endCaptures": {
            "1": {
              "name": "keyword.conditional.then.4gl"
            }
          }
        }
      ],
      "end": "(?i)\\b(end if)\\b",
      "endCaptures": {
        "1": {
          "name": "keyword.conditional.if.4gl"
        }
      }
    },
    "case-statements": {
      "name": "meta.conditional.case.4gl",
      "begin": "(?i)\\b(case)\\b",
      "beginCaptures": {
        "1":{
          "name":"keyword.conditional.case.4gl"
        }
      },
      "patterns": [
        {
          "include": "$base"
        }
      ],
      "end":"(?i)\\b(end case)\\b",
      "endCaptures": {
        "1":{
          "name":"keyword.conditional.case.4gl"
        }
      }
    }
  },
  "scopeName": "source.4gl"
}